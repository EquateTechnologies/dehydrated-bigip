#!/bin/bash

# pull in conf.d files
for i in ${BASEDIR}/conf.d/*.sh ; do
  . ${i}
done

## Programs
CURL="/usr/bin/curl"
LOGFILE=${LOGFILE:-'/var/log/dehydrated-bigip-http-01.log'}

# hook used to actually deploy certificates
DEPLOY_HOOK=${DEPLOY_HOOK:-"${BASEDIR}/hooks/dehydrated-bigip-deploy-traffic-certificate"}

# Space seperated list of IP addresses or hostnames to BIG-IP management interfaces
BIGIP_DEVICE_LIST=${BIGIP_DEVICE_LIST:-'192.168.1.245'}
# Username to access BIG-IP iControl REST API
BIGIP_USERNAME=${BIGIP_USERNAME:-'admin'}
# Password for user to access BIG-IP iControl REST API
BIGIP_PASSWORD=${BIGIP_PASSWORD:-'admin'}
# Partition to configure SSL profiles within
BIGIP_PARTITION=${BIGIP_PARTITION:-'Common'}
# Data group name, should match name used within iRule, MUST exist
BIGIP_DATA_GROUP_NAME=${BIGIP_DATA_GROUP_NAME:-'letsencrypt_http-01'}
# if 1 save config after changes, e.g. equivalent to tmsh save sys config
BIGIP_SAVE_CONFIG=${BIGIP_SAVE_CONFIG:-1}

# Initial Curl connection timeout value in seconds.
TIMEOUT=${TIMEOUT:-5}
## Maximum time for an API call to return. Depending on what you are doing,
##  this value should be quite large as some calls take a long time to
##  complete!  Testing your script should provide you with a good ideal
##  about what is too long.  I usually start at 120 seconds and go up from there.
MAXTIMEOUT=${MAXTIMEOUT:-120}

####### START F5CommonRESTAPIs.sh #######

#  Sample F5 BIGIP Reset Configuration script
#  John D. Allen
#  April, 2016
#
#-----------------------------------------------------------------------------------
# Software is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Initial Developer of the Original Code is F5 Networks,
# Inc. Seattle, WA, USA. Portions created by F5 are Copyright (C) 2016 F5 Networks,
# Inc. All Rights Reserved.
#
# Author: John D. Allen, Solution Architect, F5 Networks
# Email: john.allen@f5.com
#-----------------------------------------------------------------------------------
# This file contains a number of common iControl REST API functions that are used
# by the other bash scripts.
#

#-------------------------------------------------------
# Function: log()
#-------------------------------------------------------
DATE='date +%m/%d/%Y:%H:%M:%S'
log() {
  echo `$DATE`" $*" >> $LOGFILE
}

#-------------------------------------------------------
# Function: restCall()
#-------------------------------------------------------
restCall() {
  # $1 => Type (GET, PUT, POST, DELETE, PATCH, etc.)
  # $2 => URL past 'mgmt'  Example: "/tm/security/firewall/policy/~Common~TestPolicy1" for
  #       https://10.147.29.215/mgmt/tm/security/firewall/policy/~Common~TestPolicy1
  # $3 => JSON payload, if any.

  CONTTYPE='-H Content-Type: application/json'
  AUTH="--user $BIGIP_USERNAME:$BIGIP_PASSWORD"
  TIME="--connect-timeout $TIMEOUT"
  MAXTIME="-m $MAXTIMEOUT"
  URL="https://$BIGIP_DEVICE/mgmt$2"
  if [[ $1 == POST || $1 == PATCH || $1 == PUT ]]; then
    log "restCall():${CURL} -sk ${TIME} ${MAXTIME} ${CONTTYPE} ${AUTH} ${URL} -X $1 -d \"$3\""
    ${CURL} -sk ${TIME} ${MAXTIME} ${CONTTYPE} ${AUTH} ${URL} -X $1 -d "$3"
  else
    log "restCall():${CURL} -sk ${TIME} ${MAXTIME} ${CONTTYPE} ${AUTH} ${URL} -X $1 "
    ${CURL} -sk ${TIME} ${MAXTIME} ${CONTTYPE} ${AUTH} ${URL} -X $1
  fi
}

#-------------------------------------------------------
# Function: isAvailable()
#   Tests to see if BIGIP is ready to accept API calls.
#-------------------------------------------------------
isAvailable() {
  OUT=$(restCall "GET" "/tm/ltm/available")
  log "isAvailable():`echo $OUT`"
  if [[ $(echo $OUT | grep '^{}')x != x ]]; then
    return 0
  else
    return 1
  fi
}

#-------------------------------------------------------
# Function: whenAvailable()
#  Waits for BIGIP to become available, within the
#  MAXTIMEOUT value.
#-------------------------------------------------------
whenAvailable() {
  # $SECONDS is a built-in Bash var for # of seconds Bash has been running.
  STARTTIME=$SECONDS
  while true; do
    sleep 1
    if (isAvailable); then
      return 0
    fi
    duration=$SECONDS
    if [[ $(($duration - $STARTTIME)) -gt $MAXTIMEOUT ]]; then
      return 1
    fi
  done
}

#-------------------------------------------------------
# Function: waitForActiveStatus()
#  Waits for the BIGIP to move/be in "Active" status like
#  on the command prompt.
#-------------------------------------------------------
waitForActiveStatus() {
  STARTTIME=$SECONDS
  while true; do
    sleep 3
    OUT=$(restCall "GET" "/tm/sys/failover" 2>/dev/null | grep -qi active && echo active || echo no )
    log "waitForActiveStatus(): `echo $OUT`"
    if [[ $(echo $OUT) == "active" ]]; then
      return 0
    fi
    duration=$SECONDS
    if [[ $(($duration - $STARTTIME)) -gt $MAXTIMEOUT ]]; then
      return 1
    fi
  done
}

#-------------------------------------------------------
# Function:  jsonq()
#   Extract JSON key value. Example:
#   {
#    "generation": 1,
#    "items": [
#        {
#            "active": true,
#            "build": "0.0.606",
#            "generation": 1
#        }
#     [,
#   }
# ... | jsonq '["items"][0]["active"]'
# True
#-------------------------------------------------------
jsonq() {
  python -c "import sys,json; input=json.load(sys.stdin); print input$1"
}

#-------------------------------------------------------
# Function: saveConfig()
#-------------------------------------------------------
saveConfig() {
  OUT=$(restCall "POST" "/tm/sys/config" '{"command": "save"}')
  log "saveConfig(): `echo $OUT | python -mjson.tool`"
  if [[ $(echo $OUT | jsonq '["kind"]') != "tm:sys:config:savestate" ]]; then
    echo "ERROR! Configuration Save was not successful."
    return 1
  fi
  return 0
}

####### END F5CommonRESTAPIs.sh #######

log "** Adding common iControl REST API Function **"

#-----------------------------------------------------------------------
#---------------[ iRule & Data Group Functions]-------------------------
#-----------------------------------------------------------------------

#-------------------------------------------------------
# Function: createDataGroup()
# Creates and 'internal' Data Group on the BIGIP.
# $1 => name of Data Group
# $2 => DG type:  string, ip, integer
#-------------------------------------------------------
createDataGroup() {
  OUT=$(restCall "POST" "/tm/ltm/data-group/internal" "{ \"name\": \"${1}\", \"type\": \"${2}\" }")
  log "createDataGroup(): `echo $OUT | python -mjson.tool`"
  if [[ $(echo $OUT | jsonq '["kind"]') != "tm:ltm:data-group:internal:internalstate" ]]; then
    echo "ERROR: Unable to create Data Group ${1}"
    return 1
  fi
  return 0
}

#-------------------------------------------------------
# Function: addToDataGroup()
#   Adds to an existing Data Group.  This fucntion is much more complex,
#  since you need to capture all the existing entries into an JSON array,
#  insert the new entry, then send them all back. [Yes, it gets ugly with large lists]
# $1 => Name of Data Group
# $2 => Item to insert into group
# $3 => Item value to insert into group
#-------------------------------------------------------
addToDataGroup() {
  OUT=$(restCall "GET" "/tm/ltm/data-group/internal/~${BIGIP_PARTITION}~${1}")
  log "addToDataGroup()[Initial GET]: `echo $OUT | python -mjson.tool`"
  ## Grab all the current records and add the new one to the end of the JSON array.
  if [[ $(echo $OUT | grep records) == "" ]]; then
    # No records yet, so add the first one.
    TT="[ { \"name\": \"${2}\", \"data\": \"${3}\" } ]"
  else
    TT=$(echo $OUT | python -c "import sys,json; input=json.load(sys.stdin); tt=input[\"records\"]; tt.append({ \"name\": \"${2}\", \"data\": \"${3}\" }); print json.dumps(tt)")
  fi
  log "addToDataGroup()[Record Insert]: `echo \"{ \"records\": ${TT} }\"`"
  ##  Overwrite the old records list with the new one.
  TS=$(echo "{ \"records\": ${TT} }")
  OUT=$(restCall "PUT" "/tm/ltm/data-group/internal/~${BIGIP_PARTITION}~${1}" "{ \"records\": ${TT} }")
  log "addToDataGroup()[Write Back Results]: `echo $OUT | python -mjson.tool`"
  if [[ $(echo $OUT | jsonq '["kind"]') != "tm:ltm:data-group:internal:internalstate" ]]; then
    echo "ERROR: Data Group records were not added correctly."
    return 1
  fi
  return 0
}

#-------------------------------------------------------
# Function: deleteFromDataGroup()
#   Deletes an entry from an existing Data Group.  This fucntion is much more complex,
#  since you need to capture all the existing entries into an JSON array,
#  insert the new entry, then send them all back. [Yes, it gets ugly with large lists]
# $1 => Name of Data Group
# $2 => Item to delete from group
#-------------------------------------------------------
deleteFromDataGroup() {
  OUT=$(restCall "GET" "/tm/ltm/data-group/internal/~${BIGIP_PARTITION}~${1}")
  log "deleteFromDataGroup()[Initial GET]: `echo $OUT | python -mjson.tool`"
  ## Grab all the current records and add the new one to the end of the JSON array.
  if [[ $(echo $OUT | grep records) == "" ]]; then
    # No records; re-write empty data group
    TT=""
  else
    # Re-format records; removing the record identified by ${2}
    TT=$(echo $OUT | python -c "import sys,json; input=json.load(sys.stdin); tt=input[\"records\"]; print json.dumps(tt)" | sed -E -e "s/\{\"name\": \"${2}\", \"data\": \"[a-zA-Z0-9]*\"},* *//" -e "s/\{\"data\": \"[a-zA-Z0-9]*\", \"name\": \"${2}\"},* *//")
  fi

  log "deleteFromDataGroup()[Record Removed]: `echo \"{ \"records\": ${TT} }\"`"

  if [ "${TT}x" != "x" ] ; then
    ##  Overwrite the old records list with the new one.
    TS=$(echo "{ \"records\": ${TT} }")
    OUT=$(restCall "PUT" "/tm/ltm/data-group/internal/~${BIGIP_PARTITION}~${1}" "{ \"records\": ${TT} }")
    log "deleteFromDataGroup()[Write Back Results]: `echo $OUT | python -mjson.tool`"
    if [[ $(echo $OUT | jsonq '["kind"]') != "tm:ltm:data-group:internal:internalstate" ]]; then
      echo "ERROR: Data Group records were not deleted correctly."
      return 1
    fi
  fi

  return 0
}

# dehydrated hooks

deploy_challenge() {
    local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

    # This hook is called once for every domain that needs to be
    # validated, including any alternative names you may have listed.
    #
    # Parameters:
    # - DOMAIN
    #   The domain name (CN or subject alternative name) being
    #   validated.
    # - TOKEN_FILENAME
    #   The name of the file containing the token to be served for HTTP
    #   validation. Should be served by your web server as
    #   /.well-known/acme-challenge/${TOKEN_FILENAME}.
    # - TOKEN_VALUE
    #   The token value that needs to be served for validation. For DNS
    #   validation, this is what you want to put in the _acme-challenge
    #   TXT record. For HTTP validation it is the value that is expected
    #   be found in the $TOKEN_FILENAME file.

    echo "NOTE: Deploying challenge to F5 BIG-IP (${DOMAIN}/${TOKEN_FILENAME}/${TOKEN_VALUE})"

    if (! whenAvailable); then
      echo "ERROR: BIGIP Not responding... Please check to see if it is running!"
      return 1
    fi

    OUT=$(addToDataGroup "${BIGIP_DATA_GROUP_NAME}" "${TOKEN_FILENAME}" "${TOKEN_VALUE}")

    if ! $OUT; then
      echo "Error: Token for ${DOMAIN} was not added correctly!"
      exit 1
    fi
}

clean_challenge() {
    local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

    # This hook is called after attempting to validate each domain,
    # whether or not validation was successful. Here you can delete
    # files or DNS records that are no longer needed.
    #
    # The parameters are the same as for deploy_challenge.

    echo "NOTE: Removing challenge from F5 BIG-IP (${DOMAIN}/${TOKEN_FILENAME})"

    if (! whenAvailable); then
      echo "ERROR: BIGIP Not responding... Please check to see if it is running!"
      return 1
    fi

    OUT=$(deleteFromDataGroup "${BIGIP_DATA_GROUP_NAME}" "${TOKEN_FILENAME}")

    #if ! $OUT; then
    #  echo "Error: Token for ${DOMAIN} was not added correctly!"
    #  exit 1
    #fi
}

HANDLER="$1"; shift
if [ -n "$(type -t $HANDLER)" ] && [ "$(type -t $HANDLER)" = function ]; then
  # iterate thru list of BIGIP's that we need to operate upon
  for BIGIP_DEVICE in ${BIGIP_DEVICE_LIST} ; do
    # conigure each BIG-IP to support HTTP-01 validation
    "$HANDLER" "$@"
  done
fi

# deploy certificates to each BIG-IP
for BIGIP_DEVICE in ${BIGIP_DEVICE_LIST} ; do
  ${DEPLOY_HOOK} "$@"
done

# EOF
